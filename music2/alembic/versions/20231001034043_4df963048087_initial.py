"""Initial

Revision ID: 4df963048087
Revises: 
Create Date: 2023-10-01 03:40:43.386546

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4df963048087"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "artist",
        sa.Column(
            "artist_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("year_min", sa.Integer(), nullable=True),
        sa.Column("year_max", sa.Integer(), nullable=True),
        sa.Column("primary_artist_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["primary_artist_id"],
            ["artist.artist_id"],
            name=op.f("artist_primary_artist_id_fkey"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("artist_id", name=op.f("artist_pkey")),
    )
    op.create_index(
        op.f("artist_primary_artist_id_idx"),
        "artist",
        ["primary_artist_id"],
        unique=False,
    )
    op.create_table(
        "bracket",
        sa.Column(
            "bracket_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("epoch", sa.Integer(), nullable=True),
        sa.Column("cycle", sa.Integer(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("type", sa.Text(), nullable=False, comment="year theme aggregate"),
        sa.Column("year_min", sa.Integer(), nullable=True),
        sa.Column("year_max", sa.Integer(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False, comment="128 96 64 48 32"),
        sa.Column("date_start", sa.DateTime(), nullable=True),
        sa.Column("date_end", sa.DateTime(), nullable=True),
        sa.Column("discord_message_id", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("bracket_id", name=op.f("bracket_pkey")),
    )
    op.create_table(
        "genre",
        sa.Column(
            "genre_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("genre_id", name=op.f("genre_pkey")),
        sa.UniqueConstraint("name", name=op.f("genre_name_key")),
    )
    op.create_table(
        "link",
        sa.Column(
            "link_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("url", sa.Text(), nullable=False),
        sa.Column(
            "region",
            postgresql.ARRAY(sa.Text()),
            nullable=True,
            comment='US Canada Japan Australia Europe Asia "North America" "South America" Africa Worldwide',
        ),
        sa.PrimaryKeyConstraint("link_id", name=op.f("link_pkey")),
    )
    op.create_table(
        "participant",
        sa.Column(
            "participant_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("username", sa.Text(), nullable=False),
        sa.Column("discriminator", sa.Integer(), nullable=True),
        sa.Column("nickname", sa.Text(), nullable=True, comment="CALCULATED"),
        sa.Column(
            "date_joined",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("time_zone", sa.Text(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("participant_id", name=op.f("participant_pkey")),
    )
    op.create_table(
        "song",
        sa.Column(
            "song_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("title", sa.Text(), nullable=False),
        sa.Column("title_english", sa.Text(), nullable=True),
        sa.Column("version", sa.Text(), nullable=True),
        sa.Column("artist", sa.Text(), nullable=False, comment="CALCULATED"),
        sa.Column("collaborator", sa.Text(), nullable=True, comment="CALCULATED"),
        sa.Column("composer", sa.Text(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("year_alt", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("song_id", name=op.f("song_pkey")),
    )
    op.create_table(
        "artist_genre",
        sa.Column(
            "artist_genre_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("artist_id", sa.Uuid(), nullable=False),
        sa.Column("genre_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["artist_id"],
            ["artist.artist_id"],
            name=op.f("artist_genre_artist_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["genre_id"],
            ["genre.genre_id"],
            name=op.f("artist_genre_genre_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("artist_genre_id", name=op.f("artist_genre_pkey")),
        sa.UniqueConstraint(
            "artist_id", "genre_id", name=op.f("artist_genre_artist_id_genre_id_key")
        ),
    )
    op.create_index(
        op.f("artist_genre_artist_id_idx"), "artist_genre", ["artist_id"], unique=False
    )
    op.create_index(
        op.f("artist_genre_genre_id_idx"), "artist_genre", ["genre_id"], unique=False
    )
    op.create_table(
        "genre_relation",
        sa.Column(
            "genre_relation_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("parent_genre_id", sa.Uuid(), nullable=True),
        sa.Column("child_genre_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["child_genre_id"],
            ["genre.genre_id"],
            name=op.f("genre_relation_child_genre_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["parent_genre_id"],
            ["genre.genre_id"],
            name=op.f("genre_relation_parent_genre_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("genre_relation_id", name=op.f("genre_relation_pkey")),
    )
    op.create_index(
        op.f("genre_relation_child_genre_id_idx"),
        "genre_relation",
        ["child_genre_id"],
        unique=False,
    )
    op.create_index(
        op.f("genre_relation_parent_genre_id_idx"),
        "genre_relation",
        ["parent_genre_id"],
        unique=False,
    )
    op.create_table(
        "link_relation",
        sa.Column(
            "link_relation_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("parent_link_id", sa.Uuid(), nullable=False),
        sa.Column("child_link_id", sa.Uuid(), nullable=False),
        sa.Column(
            "link_relation_type",
            sa.Text(),
            nullable=False,
            comment="submission song seed",
        ),
        sa.ForeignKeyConstraint(
            ["child_link_id"],
            ["link.link_id"],
            name=op.f("link_relation_child_link_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["parent_link_id"],
            ["link.link_id"],
            name=op.f("link_relation_parent_link_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("link_relation_id", name=op.f("link_relation_pkey")),
    )
    op.create_index(
        op.f("link_relation_child_link_id_idx"),
        "link_relation",
        ["child_link_id"],
        unique=False,
    )
    op.create_index(
        op.f("link_relation_parent_link_id_idx"),
        "link_relation",
        ["parent_link_id"],
        unique=False,
    )
    op.create_table(
        "participant_nickname",
        sa.Column(
            "participant_nickname_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("participant_id", sa.Uuid(), nullable=False),
        sa.Column("nickname", sa.Text(), nullable=False),
        sa.Column(
            "date_start", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("date_end", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["participant.participant_id"],
            name=op.f("participant_nickname_participant_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "participant_nickname_id", name=op.f("participant_nickname_pkey")
        ),
    )
    op.create_index(
        op.f("participant_nickname_participant_id_idx"),
        "participant_nickname",
        ["participant_id"],
        unique=False,
    )
    op.create_table(
        "project",
        sa.Column(
            "project_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("project_lead_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_lead_id"],
            ["participant.participant_id"],
            name=op.f("project_project_lead_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("project_id", name=op.f("project_pkey")),
        sa.UniqueConstraint("name", name=op.f("project_name_key")),
    )
    op.create_table(
        "round",
        sa.Column(
            "round_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("bracket_id", sa.Uuid(), nullable=False),
        sa.Column(
            "name",
            sa.Text(),
            nullable=False,
            comment='Finals "Third Place" "Semi-Finals" "Quarter-Finals" "Round of 16" "Round of 32" "Round of 64" "Round of 128" "Play-Ins"',
        ),
        sa.Column(
            "size", sa.Integer(), nullable=False, comment="0 means play-in round"
        ),
        sa.Column(
            "index_asc",
            sa.Integer(),
            nullable=False,
            comment="-1-indexed from Play-Ins",
        ),
        sa.Column(
            "index_desc", sa.Integer(), nullable=False, comment="0-indexed from Finals"
        ),
        sa.Column(
            "date_start", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("date_end", sa.DateTime(), nullable=True),
        sa.Column("discord_message_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["bracket_id"],
            ["bracket.bracket_id"],
            name=op.f("round_bracket_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("round_id", name=op.f("round_pkey")),
    )
    op.create_index(op.f("round_bracket_id_idx"), "round", ["bracket_id"], unique=False)
    op.create_table(
        "song_artist",
        sa.Column(
            "song_artist_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("song_id", sa.Uuid(), nullable=False),
        sa.Column("artist_id", sa.Uuid(), nullable=False),
        sa.Column(
            "credit_type",
            sa.Text(),
            nullable=False,
            comment="primary collaborator original remixer composer",
        ),
        sa.ForeignKeyConstraint(
            ["artist_id"],
            ["artist.artist_id"],
            name=op.f("song_artist_artist_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["song_id"],
            ["song.song_id"],
            name=op.f("song_artist_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("song_artist_id", name=op.f("song_artist_pkey")),
        sa.UniqueConstraint(
            "song_id", "artist_id", name=op.f("song_artist_song_id_artist_id_key")
        ),
    )
    op.create_index(
        op.f("song_artist_artist_id_idx"), "song_artist", ["artist_id"], unique=False
    )
    op.create_index(
        op.f("song_artist_song_id_idx"), "song_artist", ["song_id"], unique=False
    )
    op.create_table(
        "song_genre",
        sa.Column(
            "song_genre_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("song_id", sa.Uuid(), nullable=False),
        sa.Column("genre_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["genre_id"],
            ["genre.genre_id"],
            name=op.f("song_genre_genre_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["song_id"],
            ["song.song_id"],
            name=op.f("song_genre_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("song_genre_id", name=op.f("song_genre_pkey")),
        sa.UniqueConstraint(
            "song_id", "genre_id", name=op.f("song_genre_song_id_genre_id_key")
        ),
    )
    op.create_index(
        op.f("song_genre_genre_id_idx"), "song_genre", ["genre_id"], unique=False
    )
    op.create_index(
        op.f("song_genre_song_id_idx"), "song_genre", ["song_id"], unique=False
    )
    op.create_table(
        "song_relation",
        sa.Column(
            "song_relation_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("parent_song_id", sa.Uuid(), nullable=False),
        sa.Column("child_song_id", sa.Uuid(), nullable=False),
        sa.Column(
            "song_relation_type", sa.Text(), nullable=False, comment="cover live"
        ),
        sa.ForeignKeyConstraint(
            ["child_song_id"],
            ["song.song_id"],
            name=op.f("song_relation_child_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["parent_song_id"],
            ["song.song_id"],
            name=op.f("song_relation_parent_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("song_relation_id", name=op.f("song_relation_pkey")),
    )
    op.create_index(
        op.f("song_relation_child_song_id_idx"),
        "song_relation",
        ["child_song_id"],
        unique=False,
    )
    op.create_index(
        op.f("song_relation_parent_song_id_idx"),
        "song_relation",
        ["parent_song_id"],
        unique=False,
    )
    op.create_table(
        "submission",
        sa.Column(
            "submission_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("participant_id", sa.Uuid(), nullable=False),
        sa.Column("bracket_id", sa.Uuid(), nullable=False),
        sa.Column("song_id", sa.Uuid(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column(
            "date_submitted",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("is_dupe", sa.Boolean(), nullable=False),
        sa.Column("title", sa.Text(), nullable=False),
        sa.Column("version", sa.Text(), nullable=True),
        sa.Column("artist", sa.Text(), nullable=True),
        sa.Column("collaborators", sa.Text(), nullable=True),
        sa.Column("composers", sa.Text(), nullable=True),
        sa.Column("link", sa.Text(), nullable=False),
        sa.Column("genre", sa.Text(), nullable=True),
        sa.Column("emoji", sa.Text(), nullable=True),
        sa.Column("comments", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["bracket_id"],
            ["bracket.bracket_id"],
            name=op.f("submission_bracket_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["participant.participant_id"],
            name=op.f("submission_participant_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["song_id"],
            ["song.song_id"],
            name=op.f("submission_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("submission_id", name=op.f("submission_pkey")),
    )
    op.create_index(
        op.f("submission_bracket_id_idx"), "submission", ["bracket_id"], unique=False
    )
    op.create_index(
        op.f("submission_participant_id_idx"),
        "submission",
        ["participant_id"],
        unique=False,
    )
    op.create_index(
        op.f("submission_song_id_idx"), "submission", ["song_id"], unique=False
    )
    op.create_table(
        "bracket_selection",
        sa.Column(
            "bracket_selection_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("epoch", sa.Integer(), nullable=False),
        sa.Column("cycle", sa.Integer(), nullable=False),
        sa.Column("bracket_id", sa.Uuid(), nullable=False),
        sa.Column(
            "date_selected",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["bracket_id"],
            ["bracket.bracket_id"],
            name=op.f("bracket_selection_bracket_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.project_id"],
            name=op.f("bracket_selection_project_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "bracket_selection_id", name=op.f("bracket_selection_pkey")
        ),
    )
    op.create_index(
        op.f("bracket_selection_bracket_id_idx"),
        "bracket_selection",
        ["bracket_id"],
        unique=False,
    )
    op.create_index(
        op.f("bracket_selection_project_id_idx"),
        "bracket_selection",
        ["project_id"],
        unique=False,
    )
    op.create_table(
        "config",
        sa.Column("project_id", sa.Uuid(), nullable=False),
        sa.Column("key", sa.Text(), nullable=False),
        sa.Column("value", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.project_id"],
            name=op.f("config_project_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("project_id", "key", name=op.f("config_pkey")),
    )
    op.create_table(
        "match",
        sa.Column(
            "match_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("round_id", sa.Uuid(), nullable=False),
        sa.Column("index", sa.Integer(), nullable=False),
        sa.Column("date_posted", sa.DateTime(), nullable=True),
        sa.Column(
            "tie", sa.Integer(), nullable=False, comment="0 (no), 1 (broken), 2 (kept)"
        ),
        sa.Column("winner_id", sa.Uuid(), nullable=True),
        sa.Column("date_cancelled", sa.DateTime(), nullable=True),
        sa.Column(
            "reason_cancelled",
            sa.Text(),
            nullable=True,
            comment='"ineligible sub0" "ineligible sub1" "administrative error"',
        ),
        sa.Column("next_match_id", sa.Uuid(), nullable=True),
        sa.Column("discord_message_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["next_match_id"],
            ["match.match_id"],
            name=op.f("match_next_match_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["round.round_id"],
            name=op.f("match_round_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["submission.submission_id"],
            name=op.f("match_winner_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("match_id", name=op.f("match_pkey")),
    )
    op.create_index(
        op.f("match_next_match_id_idx"), "match", ["next_match_id"], unique=False
    )
    op.create_index(op.f("match_round_id_idx"), "match", ["round_id"], unique=False)
    op.create_index(op.f("match_winner_id_idx"), "match", ["winner_id"], unique=False)
    op.create_table(
        "notification",
        sa.Column(
            "notification_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("participant_id", sa.Uuid(), nullable=False),
        sa.Column("submission_id", sa.Uuid(), nullable=True),
        sa.Column(
            "date_first_attempt",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("date_succeeded", sa.DateTime(), nullable=True),
        sa.Column(
            "notification_type",
            sa.Text(),
            nullable=False,
            comment='"need replacement" "no replacement" "tie"',
        ),
        sa.Column("discord_message_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["participant.participant_id"],
            name=op.f("notification_participant_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.submission_id"],
            name=op.f("notification_submission_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("notification_id", name=op.f("notification_pkey")),
    )
    op.create_index(
        op.f("notification_participant_id_idx"),
        "notification",
        ["participant_id"],
        unique=False,
    )
    op.create_index(
        op.f("notification_submission_id_idx"),
        "notification",
        ["submission_id"],
        unique=False,
    )
    op.create_table(
        "seed",
        sa.Column(
            "seed_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("bracket_id", sa.Uuid(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("submission_id", sa.Uuid(), nullable=False),
        sa.Column("emoji", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bracket_id"],
            ["bracket.bracket_id"],
            name=op.f("seed_bracket_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.submission_id"],
            name=op.f("seed_submission_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("seed_id", name=op.f("seed_pkey")),
        sa.UniqueConstraint(
            "bracket_id", "seed", name=op.f("seed_bracket_id_seed_key")
        ),
    )
    op.create_index(op.f("seed_bracket_id_idx"), "seed", ["bracket_id"], unique=False)
    op.create_index(op.f("seed_seed_idx"), "seed", ["seed"], unique=False)
    op.create_index(
        op.f("seed_submission_id_idx"), "seed", ["submission_id"], unique=False
    )
    op.create_table(
        "submission_history",
        sa.Column(
            "submission_history_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_note",
            sa.Text(),
            nullable=False,
            comment='dupe ineligible withdrawn "play-in loser"',
        ),
        sa.Column("submission_id", sa.Uuid(), nullable=False),
        sa.Column("participant_id", sa.Uuid(), nullable=False),
        sa.Column("bracket_id", sa.Uuid(), nullable=False),
        sa.Column("song_id", sa.Uuid(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column(
            "date_submitted",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("is_dupe", sa.Boolean(), nullable=False),
        sa.Column("title", sa.Text(), nullable=False),
        sa.Column("version", sa.Text(), nullable=True),
        sa.Column("artist", sa.Text(), nullable=True),
        sa.Column("collaborators", sa.Text(), nullable=True),
        sa.Column("composers", sa.Text(), nullable=True),
        sa.Column("link", sa.Text(), nullable=False),
        sa.Column("genre", sa.Text(), nullable=True),
        sa.Column("emoji", sa.Text(), nullable=True),
        sa.Column("comments", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["bracket_id"],
            ["bracket.bracket_id"],
            name=op.f("submission_history_bracket_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["participant.participant_id"],
            name=op.f("submission_history_participant_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["song_id"],
            ["song.song_id"],
            name=op.f("submission_history_song_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.submission_id"],
            name=op.f("submission_history_submission_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "submission_history_id", name=op.f("submission_history_pkey")
        ),
    )
    op.create_index(
        op.f("submission_history_bracket_id_idx"),
        "submission_history",
        ["bracket_id"],
        unique=False,
    )
    op.create_index(
        op.f("submission_history_participant_id_idx"),
        "submission_history",
        ["participant_id"],
        unique=False,
    )
    op.create_index(
        op.f("submission_history_song_id_idx"),
        "submission_history",
        ["song_id"],
        unique=False,
    )
    op.create_index(
        op.f("submission_history_submission_id_idx"),
        "submission_history",
        ["submission_id"],
        unique=False,
    )
    op.create_table(
        "match_seed",
        sa.Column(
            "match_seed_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("match_id", sa.Uuid(), nullable=False),
        sa.Column("seed_id", sa.Uuid(), nullable=False),
        sa.Column("index", sa.Integer(), nullable=False),
        sa.Column("votes", sa.Integer(), nullable=False),
        sa.Column("voters", postgresql.ARRAY(sa.Text()), nullable=False),
        sa.Column("previous_match_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["match.match_id"],
            name=op.f("match_seed_match_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["previous_match_id"],
            ["match.match_id"],
            name=op.f("match_seed_previous_match_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["seed_id"],
            ["seed.seed_id"],
            name=op.f("match_seed_seed_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("match_seed_id", name=op.f("match_seed_pkey")),
    )
    op.create_index(
        op.f("match_seed_match_id_idx"), "match_seed", ["match_id"], unique=False
    )
    op.create_index(
        op.f("match_seed_previous_match_id_idx"),
        "match_seed",
        ["previous_match_id"],
        unique=False,
    )
    op.create_index(
        op.f("match_seed_seed_id_idx"), "match_seed", ["seed_id"], unique=False
    )
    op.create_table(
        "seed_history",
        sa.Column(
            "seed_history_id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_note", sa.Text(), nullable=False, comment='"missed dupe" ineligible'
        ),
        sa.Column("seed_id", sa.Uuid(), nullable=False),
        sa.Column("submission_id", sa.Uuid(), nullable=False),
        sa.Column("emoji", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["seed_id"],
            ["seed.seed_id"],
            name=op.f("seed_history_seed_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.submission_id"],
            name=op.f("seed_history_submission_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("seed_history_id", name=op.f("seed_history_pkey")),
    )
    op.create_index(
        op.f("seed_history_seed_id_idx"), "seed_history", ["seed_id"], unique=False
    )
    op.create_index(
        op.f("seed_history_submission_id_idx"),
        "seed_history",
        ["submission_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("seed_history_submission_id_idx"), table_name="seed_history")
    op.drop_index(op.f("seed_history_seed_id_idx"), table_name="seed_history")
    op.drop_table("seed_history")
    op.drop_index(op.f("match_seed_seed_id_idx"), table_name="match_seed")
    op.drop_index(op.f("match_seed_previous_match_id_idx"), table_name="match_seed")
    op.drop_index(op.f("match_seed_match_id_idx"), table_name="match_seed")
    op.drop_table("match_seed")
    op.drop_index(
        op.f("submission_history_submission_id_idx"), table_name="submission_history"
    )
    op.drop_index(
        op.f("submission_history_song_id_idx"), table_name="submission_history"
    )
    op.drop_index(
        op.f("submission_history_participant_id_idx"), table_name="submission_history"
    )
    op.drop_index(
        op.f("submission_history_bracket_id_idx"), table_name="submission_history"
    )
    op.drop_table("submission_history")
    op.drop_index(op.f("seed_submission_id_idx"), table_name="seed")
    op.drop_index(op.f("seed_seed_idx"), table_name="seed")
    op.drop_index(op.f("seed_bracket_id_idx"), table_name="seed")
    op.drop_table("seed")
    op.drop_index(op.f("notification_submission_id_idx"), table_name="notification")
    op.drop_index(op.f("notification_participant_id_idx"), table_name="notification")
    op.drop_table("notification")
    op.drop_index(op.f("match_winner_id_idx"), table_name="match")
    op.drop_index(op.f("match_round_id_idx"), table_name="match")
    op.drop_index(op.f("match_next_match_id_idx"), table_name="match")
    op.drop_table("match")
    op.drop_table("config")
    op.drop_index(
        op.f("bracket_selection_project_id_idx"), table_name="bracket_selection"
    )
    op.drop_index(
        op.f("bracket_selection_bracket_id_idx"), table_name="bracket_selection"
    )
    op.drop_table("bracket_selection")
    op.drop_index(op.f("submission_song_id_idx"), table_name="submission")
    op.drop_index(op.f("submission_participant_id_idx"), table_name="submission")
    op.drop_index(op.f("submission_bracket_id_idx"), table_name="submission")
    op.drop_table("submission")
    op.drop_index(op.f("song_relation_parent_song_id_idx"), table_name="song_relation")
    op.drop_index(op.f("song_relation_child_song_id_idx"), table_name="song_relation")
    op.drop_table("song_relation")
    op.drop_index(op.f("song_genre_song_id_idx"), table_name="song_genre")
    op.drop_index(op.f("song_genre_genre_id_idx"), table_name="song_genre")
    op.drop_table("song_genre")
    op.drop_index(op.f("song_artist_song_id_idx"), table_name="song_artist")
    op.drop_index(op.f("song_artist_artist_id_idx"), table_name="song_artist")
    op.drop_table("song_artist")
    op.drop_index(op.f("round_bracket_id_idx"), table_name="round")
    op.drop_table("round")
    op.drop_table("project")
    op.drop_index(
        op.f("participant_nickname_participant_id_idx"),
        table_name="participant_nickname",
    )
    op.drop_table("participant_nickname")
    op.drop_index(op.f("link_relation_parent_link_id_idx"), table_name="link_relation")
    op.drop_index(op.f("link_relation_child_link_id_idx"), table_name="link_relation")
    op.drop_table("link_relation")
    op.drop_index(
        op.f("genre_relation_parent_genre_id_idx"), table_name="genre_relation"
    )
    op.drop_index(
        op.f("genre_relation_child_genre_id_idx"), table_name="genre_relation"
    )
    op.drop_table("genre_relation")
    op.drop_index(op.f("artist_genre_genre_id_idx"), table_name="artist_genre")
    op.drop_index(op.f("artist_genre_artist_id_idx"), table_name="artist_genre")
    op.drop_table("artist_genre")
    op.drop_table("song")
    op.drop_table("participant")
    op.drop_table("link")
    op.drop_table("genre")
    op.drop_table("bracket")
    op.drop_index(op.f("artist_primary_artist_id_idx"), table_name="artist")
    op.drop_table("artist")
    # ### end Alembic commands ###
