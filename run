#!/bin/env bash

usage() {
cat << 'END'
Music2.0 Development Commands

USAGE
  ./run [COMMAND] [options]

COMMAND
  server        run development server locally, access at 127.0.0.1:8080
  db_shell      open a psql prompt using the provided DB credentials
  db_tunnel     open an SSH tunnel through music.volfied.net to the RDS instance
  alembic_auto  autogenerate a new alembic migration based on ORM changes
  alembic_empty create a new empty alembic migration file
  alembic_run   upgrade (or downgrade) the db to a new alembic migration
                set DIRECTION to 'downgrade' for reverse migrations
                if no revision is specified, defaults to 'head' for upgrade or
                '-1' for downgrade
  lint          run black and isort
  tests         run the full test suite
  tests_fast    run only the quicker tests, excluding db and integration tests

END
}

command="$1"
args=("${@:2}")

export DB_HOST_REMOTE=${DB_HOST_REMOTE:-musicdb.cpc6p0drvgxc.us-east-1.rds.amazonaws.com}
export DB_HOST=${DB_HOST:-localhost}
export DB_PORT=${DB_PORT:-5432}
export DB_NAME=${DB_NAME:-music}

# Use this to ensure the DB password is available for commands that need it
_require_db_creds () {
  if [[ -z "$DB_USER" || -z "$DB_PASSWORD" ]]; then
    echo "DB_USER and DB_PASSWORD are required" && exit 1
  fi
}

case $command in
  server)
    _require_db_creds
    echo "Starting development server"
    poetry run python -m music2.app "${args[@]}"
    ;;
  db_shell)
    _require_db_creds
    echo "Establishing db connection to postgresql://${DB_USER}:***@${DB_HOST}:${DB_PORT}/${DB_NAME}"
    PGPASSWORD="$DB_PASSWORD" psql --host="$DB_HOST" --port="$DB_PORT" --username="$DB_USER" --dbname="$DB_NAME" "${args[@]}"
    ;;
  db_tunnel)
    host=${2:-$DB_HOST_REMOTE}
    echo "Tunneling port 5432 to '$host'"
    ssh -L 5432:"$host":5432 -N music.volfied.net
    ;;
  alembic_auto)
    echo "Autogenerating new alembic migration"
    read -p "Enter migration message: " message
    poetry run alembic revision --autogenerate -m "$message" "${args[@]}"
    ;;
  alembic_empty)
    echo "Generating new empty alembic migration"
    read -p "Enter migration message: " message
    poetry run alembic revision -m "$message" "${args[@]}"
    ;;
  alembic_run)
    direction=${DIRECTION:-upgrade}
    pattern='^(up|down)grade$'
    if [[ ! "$direction" =~ $pattern ]]; then
      echo "DIRECTION variable must be one of 'upgrade' (default) or 'downgrade'" && exit 1
    fi
    # If no further arguments are supplied, default to 'head'
    if [ ${#args[@]} -eq 0 ]; then
      if [[ "$direction" = "upgrade" ]]; then
        args=("head")
      else
        args=("-1")
      fi
    fi
    echo "Running alembic $direction ${args[@]}"
    poetry run alembic "$direction" "${args[@]}"
    ;;
  lint)
    echo "Sorting imports and reformatting source files"
    poetry run isort music2 tests
    poetry run black music2 tests
    ;;
  tests)
    _require_db_creds
    echo "Running test suite"
    poetry run pytest "${args[@]}"
    ;;
  tests_fast)
    echo "Running test suite, excluding integration and db tests"
    poetry run pytest -m "not (integration or db)" "${args[@]}"
    ;;
  *)
    if [[ ! -z "$command" ]]; then
      echo -e "Unrecognized command '$command'\n"
    fi
    usage
    ;;
esac
